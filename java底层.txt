CAS
	一、什么是CAS
		简单说就是先比较再替换
		代码实例：
			AtomicInteger atomicInteger = new AtomicInteger();
			boolean flag = atomicInteger.compareAndSet(期望值, 修改值);
				期望值：表示工作内存从主物理内存拷贝出来的值
				修改值：希望将主物理内存修改成的值
				flag：如果期望值不等于当前主物理内存中的值将会修改主物理内存中的值失败并返回false
		CAS的全称Compare-And-Swap，它是一条CPU并发原语
		CAS的并发原语体现在JAVA语言中就是sun.misc.Unsafe类中的各个方法。调用Unsafe类中的CAS方法，JVM会帮我们实现出CAS汇编
		指令。由于CAS是一种系统原语，原语属于操作系统用语范畴，是由若干条指令组成的，用于完成某个功能的一个过程，并且原语
		的执行必须是连续的，在执行过程中不允许被中断，也就是说CAS是一个CPU的原子指令，不会造成数据不一致的问题(线程安全)
	二、CAS的底层原理
		1、自旋锁
		
		2、unsafe类
			是CAS的核心类，由于java方法无法直接访问底层系统，需要通过本地(native)方法来访问，Unsafe相当于一个后门，基于该
			类可以直接操作特定内存的数据，Unsafe类存在于sum.mic包中，其内部方法操作可以像C的指针一样直接操作内存，因此
			Java中CAS操作的执行依赖于Unsafe类的方法注意Unsafe类中的所有方法都是native修饰的，也就是说Unsafe类中的方法都
			直接调用操作系统底层资源执行相应任务。
			
			AtomicInteger 类的 getAndIncrement方法(相当于 i++)调用的 Unsafe 类的 getAndAddInt 方法
			Unsafe类的 getAndAddInt 方法原理
				public final int getAndAddInt(Object var1, long var2, int var4) {
						//var1:AtomicInteger类的当前对象 var2:当前对象的内存地址 var4:要增加的值
					int var5;
					do {
						var5 = this.getIntVolatile(var1, var2);
						//this.getIntVolatile(var1, var2):根据AtomicInteger类的当前对象和内存地址获取内存中的实际值
					} while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4));
						//compareAndSwapInt(var1, var2, var5, var5 + var4):
						//	比较var5的值是否等于AtomicInteger类当前对象的内存地址中的实际值，等于的话加上var4的值，
						//  不等于的话将会再次根据AtomicInteger类的当前对象和内存地址获取内存中的实际值，循环往复，
						//  直到修改成功。
					return var5;
				}
	三、为什么用CAS不用synchronized
		synchronized 一次允许一个线程执行，并发性较差
	四、CAS的缺点
		1、Unsafe类的 getAndAddInt 方法有个 do while 循环，在不乐观的情况下会引发长时间循环的情况，会占用较多的CPU资源。
		2、只能保证一个共享变量的原子操作。
		3、引发ABA问题
			当两个执行时间有间隔的线程操作同一个共享变量时，一个线程已经将变量更改过N次并最后将变量的值更改为最初的值，当
			另一个线程想将更改的值赋给共享变量时，会比较期望值和实际值，发现两个值相等，最终还是可以成功将值赋给共享变量。
			但是这会丢失对于一个变量的一段时间的监控
			
			ABA问题的解决：
				使用带有标记的原子引用类 AtomicStampedReference ，这个类型的 compareAndSet 方法有四个参数，后两个参数是解决ABA
				问题的核心，它们分别是 【期望标记】 和 【更新标记】 ，当期望标记与实际标记不符时将不管期望值和实际值是否相等都
				会修改失败。


String 类
	在 main 方法中传递 String 变量到其他方法进行修改，然后在 main 方法中打印，发现值还是没有改变，原因是因为：
		在 java 中 String 变量每一次赋值都会重新生成一个 String 对象，内存地址会变动。

集合类				
	ArrayList
		ArrayList 是一个线程不安全的类，因为它在进行 add 的时候没有加 synchronized，底层数据结构是数组
	ArrayList 和 LinkedList 的 增删 和 查询 效率对比
		查询
			指定位置的查询 ArrayList 的效率要优于 LinkedList
				ArrayList 有下标可以直接定位到要查询的数据，LinkedList 没有下标只能通过循环数据用链表的指向关系来定位要查询的数据
		增删(在数据长度大于一的时候)
			在头部插值
				LinkedList 的效率要大于 ArrayList
					ArrayList 的插入操作需要进行全部数据的位移操作，而 LinkedList 只需要进行部分数据的指针更新操作
			在尾部加值
				当 ArrayList 到达需要扩容的界限时，ArrayList 的尾部加值操作效率会慢于 LinkedList
					ArrayList 的底层数组当需要存储的数据长度大于数组设置的长度时需要重新 new 一个合适长度的数组并进行全部数据的copy
					，而 LinkedList 的数据长度是自由的，不需要扩容的操作
				当 ArrayList 不需要扩容时，ArrayList 和 LinkedList 的尾部加值操作理论上效率是相差不多的
			在指定的位置(非头部和尾部)插值
				这里不能明确的说哪种更快，因为在指定的位置插值两者所消耗时间的点是不一样的，ArrayList 的点在于数据的位移，
				LinkedList在于数据的遍历定位，当 ArrayList 的数据位移所耗的时间要小于 LinkedList 的遍历定位所耗的时间时，
				ArrayList 的效率就高于 LinkedList，反之则 LinkedList 的效率更高。
				根据实际程序运行得出以下具体的结论：
					有一个长度都为n的数组、链表，当n长度小于一万时，当插入位置在0.2n之前 LinkedList 的遍历定位效率较高，
					当n的长度越大，达到百万级别时，只有当插入位置在0.1n之前时 LinkedList 的遍历定位效率才会较高
	HashMap
		以键值对存储的集合类，底层的数据结构是数组 + 链表。在jdk1.8 之后又引入了红黑树的数据结构：当 HashMap 的长度大于
		等于 8 的时候，将链表的数据结构转成红黑树。
	HashTable
		就是线程安全版的HashMap，将所有读写操作的方法都加上了 synchronized，故在多线程操作下效率较慢。
	HashMap 和 HashTable 的区别 
		HashTable 是线程安全的
		HashTable 不允许有 null 值的 key 和 value, HashMap 允许有 null 值的 key 和 value。
	HashSet
		底层是HashMap, 在 add 的时候将值放入 hashMap 的 key 中，value 是一个恒定的 new Object()
	LinkedHashMap
		它是 HashMap 的一个子类，它的数据结构也是数组 + 链表，不过它的链表是一个双向链表，每一个 Entry中同时记录了它的前
		一个值和后一个值，所以它可以根据插入的顺序循环显示出来数据。
	TreeMap
		底层数据结构是红黑树，根据 key 值进行排序
		
++i 和 i++ 的区别
	++i 先进行自增的操作随后将i的值压入操作栈中
	i++ 先将i的值压入操作栈中 随后进行自增
	= 操作符右边先算 左边后算
	补充：
		在 java 中，运算的时候是按照代码的顺序来进行压入操作栈的操作的，不是按先乘除后加减的运算顺序，例如下面的代码
			int i = 1;
			int k = i + ++i * i++; //这行代码压入操作栈的值分别是 i(1) + ++i(2) * i++(2), 最终 k = 5
	
并发和并行的区别
	并发：多个线程抢一份资源
	并行：多个不相关的线程同时运行
	
并发编程的三个概念
	1、原子性
		一个或多个操作要么全部执行不允许中断，要么都不执行。
	2、可见性
		多个线程访问同一个变量时，一个线程修改了变量的值，其他的线程能够立即看到修改后的值。
	3、有序性
		程序的执行顺序按照代码的先后顺序执行。
		
java volatile 关键字
	当一个共享变量被 volatile 修饰后，它会保证修改的值会立即被更新到主物理内存，并对其他线程可见。但是这并不意味着volatile 
	关键字能够保证变量操作的原子性，例如多线程的自增操作每个自增都要经过三步(1、读取主物理内存，2、加1，3、写入主物理内存)
	，在2,3两步执行完成之前如果有其他线程进来，那么其他线程读取的还是旧的数据。
	
高内聚 低耦合是最好的程序设计模式：
	低耦合：
		程序各个功能模块之间应该尽量低耦合，两个模块之间的互通尽量使用数据交流，不使用具有控制意义的耦合，并且尽量不使用模
		块与模块之间的公共变量，如果必须使用也应该尽量缩小范围，这样一个模块的变动并不会或者比较小的影响其他的模块。
	高内聚：
		而模块的功能应该尽量独立，不依赖其他模块的代码。
	
Java 位运算符
	<<  左移运算符
		10 << 1 相当于 10 * 2 的 1 次方
	>>  右移运算符
		10 >> 1 相当于 10 / 2 的 1 次方
		
Java 取模 % 运算
	a % b = a - (a / b) * b
	注：b的值不可 0 
	
				
final 修饰符
	修饰变量
		类变量(被 static 修饰的变量)
			只能在 静态代码块 中或 声明类变量 时指定初始值。
		实例变量(未被 static 修饰的变量)
			只能在 非静态代码块 中，构造器中或声明实例变量时指定初始值。
		注：被 final 修饰的变量必须初始值之后才能使用，基本类型的变量不可以更改值，引用类型的变量不可以更改内存地址(例如 new)。
	修饰形参
		根据传入的参数完成初始化，不能被赋值更改。
	修饰引用类型变量
		保存的只是一个引用，只保证引用的地址不会改变，即一直引用一个对象，但是这个对象可以发生改变	
	修饰方法
		表示方法不可被重写，但是不影响重载。
	修饰类
		表示该类不可以有子类
		
REST 风格的请求方式
	URL定位资源(能够唯一地标识单个或一类资源)，用HTTP动词（GET,POST,DELETE,PUT）描述操作。
		
		
java 设计模式
	一、创建型模式
		1、简单工厂模式
			通过工厂类的方法可以根据不同的参数生成不同的继承自同一个父类的子类
		2、工厂模式
			多个工厂类实现同一个父级工厂接口的方法，方法内可以根据不同的参数生成不同的继承自同一个父类的子类
		3、抽象工厂模式
			同工厂模式一样也是多个工厂类实现同一个父级工厂接口的方法，不同的是子级工厂类里面的多个方法生成的多个不同对象是
			具有组合关系的，例如：同样实现 电脑 父级工厂接口的不同工厂类，一个里面生成的 cpu 主板都是 inter 的，一个里面
			生成的 cpu 主板都是 AMD 的
		4、原型模式
		5、建造者模式
		6、单例模式
			一个类在应用只能有一个实例对象，要实现分成以下3步：
				1、构造器私有化
				2、在类中使用静态变量存放唯一的实例对象
				3、向外界暴露这个实例对象，通过 public 修饰实例变量或者 get 方法
	二、结构型模式
		1、适配器模式
		2、桥接模式
		3、组合模式
		4、装饰者模式
		5、外观模式
		6、代理模式
	三、行为型模式
		1、观察者模式
		2、模板方法
		3、命令模式
		4、状态模式
		5、职责链模式

		
		
java 原理篇
	1、多线程
		Callable 和 Runnable 的区别
			Callable 拥有返回值，可以更好的定位是哪个线程出现了问题
				使用方法
					//FutureTask 实现了 Runnable 的子类 RunnableFuture， 所以该类可以放到 Thread 的构造方法中
					FutureTask<Integer> futureTask = new FutureTask(实现了 Callable 接口的类);
					new Thread(futureTask, 线程名).start();
		CountDownLatch 类 (倒计数计数线程阻塞类)
			初始化 CountDownLatch 类的时候，给定一个初始值: 
				CountDownLatch countDownLatch = new CountDownLatch(10);
			每次调用 countDownLatch.countDown() 方法的时候初始值都会减1
			当初始值变成 0 的时候写在 await() 方法后面的代码才能被执行
				countDownLatch.await();
		CyclicBarrier 类 (正计数计数线程阻塞类)
			初始化 CyclicBarrier 类的时候，给定一个初始值和一个最后执行的实现 Runnable 接口的类
				 CyclicBarrier cyclicBarrier = new CyclicBarrier(7, new LastRun()); 
				 也可以用 lambda 表达式的方式：
					CyclicBarrier cyclicBarrier = new CyclicBarrier(7, () -> {这里面写逻辑代码});
			每次调用 cyclicBarrier.await() 都会给被阻塞的线程数加1, 当线程数达到初始化时指定的值时就会最后执行初始化
			时指定的实现 Runnable 接口的类的 run() 方法
		Semaphore 类 (可伸缩计数线程阻塞类)
			初始化 Semaphore 类的时候，给定一个初始值
				Semaphore semaphore = new Semaphore(3);
			每次调用 semaphore.acquire() 都会把初始值减 1, 当减到0的时候, 后面再进来的线程就会给阻塞
			每次调用 semaphore.release() 都会把初始值加 1, 当初始值大于0的时候，后面的线程再接着进来
				注解：
					通过 semaphore.acquire() 和 semaphore.release() 的组合使用可以把同一时间并发的线程数控制在初始值之内
					，并且让后面阻塞的线程可以第一时间获得空闲出来的线程资源
		阻塞队列(BlockingQueue)
			是什么
				当队列是空时，阻塞从队列获取元素的操作
				当队列是满时，阻塞往队列插入元素的操作
			为什么需要 阻塞队列(BlockingQueue)
				可以省略掉代码中关于什么时候要阻塞线程，什么时候又要唤醒线程的操作，关于阻塞和唤醒的操作都由 阻塞队列
				(BlockingQueue) 来完成
			实现 BlockingQueue 接口
				BlockingQueue 接口 和 List 接口在结构上是属于同级的，都实现了 Conllection 接口
				实现 BlockingQueue 接口的子类
					1、ArrayBlockingQueue :由数组组成的有界阻塞队列
					2、LinkedBlockingQueue :由链表组成的有界(默认大小是 Integer.MAX_VALUE)阻塞队列
						这个初始化默认的长度是 21 亿，太过长，需要谨慎使用
					3、SynchronousQueue：单个元素的队列，当被取走后才会生产新的
				实现 BlockingQueue 接口的子类的三组用于插入和取出队列元素的方法
					第一组(会返回标识是否成功，不会抛出异常)：
						blockingQueue.offer(插入的元素值)	//成功会返回true，失败返回false
						blockingQueue.poll()				//以先进先出的原则取出元素，如果没有就返回null
						blockingQueue.peek()				//显示当前队列中第一位的元素，如果没有就返回null，显示不取出
					第二组(可以设置插入和取出的超时时间)：
						blockingQueue.offer(插入的元素值, 超时时间, TimeUnit.SECONDS) 
						//当超过超时时间没有成功插入会立刻返回false
						blockingQueue.poll(超时时间, TimeUnit.SECONDS)
						//当超过超时时间没有成功取出会立刻返回null
					第三组(如果插入或取出失败会一直阻塞，只到成功)：
						blockingQueue.put(插入的元素值)		//没有返回值
						blockingQueue.take()				//以先进先出的原则取出元素，没有返回值
				SynchronousQueue 实现类
					该类和 BlockingQueue 的另外两个实现类 ArrayBlockingQueue 和 LinkedBlockingQueue 有些区别，该类只能
					存在一个元素，当 put 了一个元素之后，必须把这个元素 take 出去之后才能 put 下一个元素
		线程池的优势(为什么要用线程池)
			原理
				线程池的主要工作是控制运行的线程的数量，处理过程中将任务放入队列，然后在线程创建后启动这些任务，
				如果线程数量超过了最大数量的线程排队等待，等其他线程执行完毕，再从队列中取出任务来执行。
			优势：
				1、降低资源消耗
					通过线程复用减少创建和销毁线程造成的消耗
				2、提高响应速度
					当任务到达时不需要等线程创建就能立即执行
				3、提高多线程的可管理性
					使用线程池可以进行线程的统一分配，调优和监控
		线程池的7大参数的含义
			java自带创建线程有三种方式(实际工作不会用这三种)，如下：
				ExecutorService threadPool = Executors.newFixedThreadPool(5); 			//一池固定 5 个线程
				ExecutorService threadPool = Executors.newSingleThreadExecutor();       //一池固定 1 个线程
				ExecutorService threadPool = Executors.newCachedThreadPool();           //一池固定 n 个线程
				注：
					使用线程池启动线程：
						threadPool.execute(() -> {逻辑代码}); 或者 threadPool.execute(实现了 Runnable 接口的类);
						线程池有启动必然要有关闭：threadPool.shutdown();
			上面创建线程的三种方式底层都是调用 ThreadPoolExecutor 类的构造函数
				ThreadPoolExecutor(int corePoolSize,			
                              int maximumPoolSize,
                              long keepAliveTime,
                              TimeUnit unit,
                              BlockingQueue<Runnable> workQueue,
                              ThreadFactory threadFactory,
                              RejectedExecutionHandler handler)
				1、corePoolSize    线程池初始化时线程的数量
				2、maximumPoolSize 线程池可以扩容的最大的线程数量
					(扩容这个动作只有在阻塞队列 workQueue 已满并且初始化线程全部被占用时才会进行)
				3、keepAliveTime   空闲线程存在时间
					(当当前线程数大于初始化线程数(corePoolSize),并且线程闲置的时间超过 keepAliveTime 时就会进行线程的
					销毁操作，只到线程数的数量达到初始化线程数(corePoolSize))
				4、unit 		   空闲线程存在时间单位
				5、workQueue	   阻塞队列，当线程池可用线程被占满时多余的任务就会被存放在阻塞队列中
				6、threadFactory   线程工厂
				7、handler		   拒绝策略
					(当线程池最大的可扩容的线程数全部被占用并且阻塞队列也满了的时候就会调用 handler 拦截后续的任务)
		线程池的主要运行流程(结合上面的7大参数来讲)
			1、任务进来后首先尝试使用初始化时线程(corePoolSize)来运行
			2、如果发现初始化时线程(corePoolSize)已满，就尝试将任务放入到阻塞队列(workQueue)中
			3、如果发现阻塞队列(workQueue)已满，线程池就会进行线程扩容的操作，扩容的最大限度是maximumPoolSize
			4、如果线程池最大的可扩容的线程数全部被占用并且阻塞队列也满了的时候就会调用 handler 拦截后续的任务
			5、如果当前线程数大于初始化线程数(corePoolSize),并且线程闲置的时间超过 keepAliveTime 时就会进行线程的
			   销毁操作，只到线程数的数量达到初始化线程数(corePoolSize)
		实际工作中创建线程池的方式
			ExecutorService threadPool = new ThreadPoolExecutor(
				3 ,		//corePoolSize: 数值设置成小于或等于maximumPoolSize
                5 ,		//maximumPoolSize：根据两种情况来设置：
						//	1、CPU密集型(需要无阻塞的进行计算) maximumPoolSize = cpu 核数 + 1
						//  2、IO密集型(需要频繁得进行数据库访问等IO操作) maximumPoolSize = cpu 核数 * 2
                1L,		//一般设置成一秒
                TimeUnit.SECONDS,
                new LinkedBlockingDeque<>(3),			//根据业务场景来定，一般设置成cpu核数就行
                Executors.defaultThreadFactory(),		//使用默认值
                new ThreadPoolExecutor.DiscardPolicy()	//可选的有四种
														//1、AbortPolicy() 直接抛异常
														//2、CallerRunsPolicy()将任务回退给调用多线程的线程
														//3、DiscardOldestPolicy() 抛弃掉等待最久的线程
														//4、DiscardPolicy() 直接丢弃线程
			);
		多线程中用java自带的命令排查死锁(idea)
			idea 快捷键 Alt + F12 打开命令窗口
			执行 jps -l 查看java类的进程号
			执行 jstack 进程号    查看java进程具体的运行情况
			注：
				在 windos 或 linux 下可以定位到 $javaHome/bin 目录下执行 
						
	2、jvm原理
		jvm 的内存结构
			class file ——>  类装载子系统(class loader)
								| ^
								v |
			----------------------------------------------------
			|			运行时数据区(runtime Data area)		   |
			|	方法区		java栈		  本地方法栈		   |
			|(method area)  (java stack)  (Native Method Stack)|
			|	  堆				程序计数器				   |
			|	(heap)		(Program Conuter Register)		   |
			----------------------------------------------------
				| ^					| ^ 
				v |					v |
			  执行引擎	 ———>	本地方法接口	 <———   本地方法库
			(Execution)  <——— (Native Interface)
			注：
				其中方法区(method area)和堆(heap)是公有的线程跟CG有关，java栈，本地方法栈和程序计数器都是私有线程，不
				会被回收，跟CG没有关系
			方法区(method area java1.7 的永久代, java1.8 的元空间)
				存储 类信息、静态变量、常量变量(存放在方法区中的运行常量池中)、
				成员方法(包括static修饰的类方法和未被static修饰的实例方法)、即时编译后的代码
			java栈(java stack)
				栈也叫栈内存，主管Java程序的运行，是在线程创建时创建，它的生命期是跟随线程的生命期，线程结束栈内存也就释放
				存储方法引用、局部变量表、操作数栈、动态链接、方法出口等信息
			字符串常量池
				java 1.8 和 java 1.7 字符串常量池被放在了 堆(heap) 中，关于代码中字符串常量池的使用如下：
					1、String s = "1";
						//直接用双引号赋值字符串变量的方法，会直接尝试在字符串常量池中生成对应的常量字符串，
						//如果常量字符串已存在就把对象的引用指向字符串常量池中的该常量字符串
					2、String s = new String("1");
						//调用String构造方法赋值字符串变量的方法，会先在堆中生成对象，并且尝试在字符串常量池中生成对应的常
						//量字符串，如果常量字符串已存在就生成失败
					3、String 对象的intern 方法
						//将 String 对象的引用放入字符串常量池当中，当然如果字符串常量池中有跟该对象相同的值时将会失败
		类加载器是什么(class loader)
			JVM三种预定义类型类加载器
				1、启动（Bootstrap）类加载器：
					它负责将 <JAVA_HOME>/lib下面的核心类库加载到内存中,并且只会加载<JAVA_HOME>/lib下自带的类，用户自定义
					的类丢进去是无法被加载的
				2、扩展（Extension）类加载器(sun.misc.Launcher.ExtClassLoader)：
					它负责将 <JAVA_HOME >/lib/ext下的类库 加载到内存中
				3、系统（System）类加载器(sun.misc.Launcher.AppClassLoader)：
					它负责将当前程序的jar包和class文件加载到内存中
			类加载双亲委派机制介绍和分析
				JVM在加载类时默认采用的是双亲委派机制。
				意思是某个特定的类加载器在接到加载类的请求时，首先将加载任务委托给父类加载器，依次递归。
				因此，所有的加载请求最终都应该传送到顶层的启动类加载器中。如果父类加载器可以完成这个类加载
				请求，就成功返回；只有当父类加载器无法完成此加载请求时，子加载器才会尝试自己去加载。
		JVM XX参数
			Boolean 类型
				公式：
					-XX:+或者-某个配置项名
					+表示开启 -表示关闭
				Case
					开启打印GC收集细节：-XX:+PrintGCDetails
					注：
						可以组合使用 jps -l 和 jinfo -flag 配置项名 java进程号 命令查看java应用某配置项的值
						jinfo -flags java进程号 ：查看java应用所有配置项的值
						java -XX:+PrintFlagsInitial 类文件 
							运行类文件并查看jvm全部的配置项初始化的值
						java -XX:+PrintFlagsFinal 类文件  
							运行类文件并查看jvm全部的配置项更新后的值(:=表示人为修改过的)
						java -XX:+PrintCommandLineFlags 类文件 
							运行查看jvm部分的配置项更新后的值(主要查看默认垃圾回收器比较方便)
			KV设置类型
				公式：
					-XX:配置项名=配置项值
				Case
					设置元空间的大小：-XX:MetaspaceSize=1024m
		JVM 常用的用作性能调优的参数 
			-Xms :初始堆内存大小，默认物理内存的1/64  等价于 -XX:InitialHeapSize
			-Xmx :最大分配堆内存，默认物理内存的1/4	等价于 -XX:MaxHeapSize
			-Xss :设置单个线程栈的大小，一般默认为512k-1024k 等价于 -XX:ThreadStackSize
			-Xmn :设置年轻代大小
			-XX:MetaspaceSize :设置元空间大小
			-XX:+PrintGCDetails :设置打印垃圾回收详情
				详情所代表的含义如下
					[Full GC (Allocation Failure) 			//GC 类型，该例子的GC类型是 Full GC
					[PSYoungGen: 0K->0K(2560K)] 			//新生代空间GC前占用0K，GC后占用0K，总空间2560K
					[ParOldGen: 678K->657K(7168K)] 			//老年代空间GC前占用678K，GC后占用657K，总空间7168K
					678K->657K(9728K), 						//整个堆空间GC前占用678K，GC后占用657K，总空间9728K
					[Metaspace: 3426K->3426K(1056768K)], 	//元空间GC前占用3426K，GC后占用3426K，总空间1056768K
					0.0045738 secs] 						//GC耗时(单位秒)
					[Times: user=0.00 						
					sys=0.00, 
					real=0.01 
					secs]
			-XX:SurvivorRatio :设置 Eden 区在新生代中所占的比例(这个比例=Eden所占新生代空间是Survivor的多少倍)
				例如 -XX:SurvivorRatio=8, 设置 Eden 占新生代的 8/10, SurvivorFrom 和 SurvivorTo 分别占1/10
			-XX:NewRatio :设置老年代在堆中所占比例(这个比例=老年代所占堆空间是新生代的多少倍)
				例如 -XX:NewRatio=5，设置老年代在堆中所占比例是新生代的 5 倍
			-XX:MaxTenuringThreshold :设置垃圾最大年龄
			
	3、GC
		常见的垃圾回收算法 
			确定垃圾的算法
				1、引用计数算法
					使用引用计数器存储对象的引用次数，当对象的引用次数为0时就会被视为垃圾，但由于它无法处理对象循环引用的
					情况下的垃圾辨认工作，所以该算法已经不再使用
				2、正向可达算法
					从GC roots 对象开始，计算追踪可以到达的对象，那么不可到达的对象就被视为垃圾
					那些对象可以作为GC roots 的对象
						1、虚拟机栈(栈帧中的局部变量区，也叫局部变量表)中引用的对象
						2、方法区中的类静态属性引用的对象
						3、方法区中常量引用的对象
						4、本地方法栈中JNI(Native方法)引用的对象
			整理垃圾的算法
				GC 将堆内存(heap)分成以下新生代和老年代两个大的部分
					新生代(占用1/3的堆空间: 可以通过 jvm 参数 -Xmn 调整)
						Eden(占用8/10的新生代空间)
						SurvivorFrom(占用1/10的新生代空间)
						SurvivorTo	(占用1/10的新生代空间)
					老年代(占用2/3的堆空间)
				1、复制算法(该算法用于新生代中，因为新生代存放对象不多，复制对象消耗的时间较少)
					Minor GC 的过程(复制 -> 清空 -> 互换)
						从新生代空间（包括 Eden 和 Survivor 区域）回收内存被称为 Minor GC
						1、eden、SurvivorFrom 复制到 SurvivorTo，年龄 +1
							首先，当 Eden 区满的时候会出发第一次GC，把还活着的对象拷贝到 SurvivorFrom 区，当 Eden 区
							再次出发GC的时候会扫描 Eden 区 和 SurvivorFrom 区域，对这两个区域进行垃圾回收，经过这次
							回收还存活的对象则直接复制到 SurvivorTo 区域(如果有对象的年龄已经达到了老年的标准，则赋值
							到老年代区)，同时把这些对象的年龄 +1 
						2、清空 Eden、SurvivorFrom
							然后清空 Eden 和 SurvivorFrom 中的对象
						3、SurvivorTo 和 SurvivorFrom 互换
							秉承复制之后有交换，谁空谁是To的原则，清空的 SurvivorFrom 变成下一次GC的 SurvivorTo，而
							有值的 SurvivorTo 则变成下一次GC 的SurvivorFrom。部分对象会在 SurvivorTo 和 SurvivorFrom
							区域中复制来复制去，如此变换15次(由JVM参数MaxTenuringThreshold决定，默认15)，最终如果还是
							存活，就存入老年代
					Major GC(也称Full GC，Major GC用的是下面的标记清除和标记整理算法，放在这是为了对照上面的Minor GC)
						从老年代空间中回收内存被称为 Major GC
						什么时候会触发 Major GC
							1、当老年代中空间不足以存放从新生代复制过来的对象时
							2、当老年代中最大可用的连续空间小于历代晋升到老年代的对象的平均大小时
					复制算法的优缺点
						优点：不会造成零散的内存碎片
						缺点：比较占用内存空间，而且频繁的复制比较耗时
				2、标记清除(Mark-Sweep)(该算法用于老年代中，因为老年代存放对象较多且存活率高，使用复制算法比较耗时)
					算法分成标记和清除两个阶段，先标记出要回收的对象，然后统一回收这些对象
					标记清除的优缺点
						优点：效率较高，节约内存空间
						缺点：会造成内存碎片
				3、标记整理(Mark-Compact)(该算法用于老年代中，因为老年代存放对象较多且存活率高，使用复制算法比较耗时)
					在标记清除(Mark-Sweep)的基础上加了压缩(Compact),将存活的对象压缩在一起，以腾出连续的内存空间
					标记整理(Mark-Compact)
						优点：不会造成内存碎片
						缺点：由于在标记清除(Mark-Sweep)的基础上加了压缩的一步，效率降低，时间成本升高
		java 1.7 和 java 1.8 关于永久代的区别
			1.7 中将堆(heap)分成新生代、老年代和永久代，永久代中存放Class和Meta(元数据)的信息，在1.8中永久代被移除，
			取而代之的是元空间，元空间和永久代本质类似，不过元空间并不在JVM中，而是使用的本地内存
		java 中的四种引用类型
			1、强引用(Reference)
				日常编码中99%都是强引用，类似于 Object obj = new Object() 这种就是强引用，强引用的对象是不会被GC回收的。
			2、软引用(SoftReference)
				软引用的对象在GC时会在GC时判断内存是否不够，如果不够的话就会把软引用对象回收掉
				用法:
					SoftReference<Object> reference = new SoftReference<>(new Object());
			3、弱引用(WeakReference)
				弱引用的对象在GC时一定会被回收掉
				用法: 
					WeakReference<Object> reference = new WeakReference<>(new Object());
			4、虚引用(PhantomReference)
				虚引用的对象必须和引用队列(ReferenceQueue) 配合使用，虚引用的对象在GC时一定会被回收掉，
				当虚引用的对象被 GC 回收之后会在引用队列中存入一个空的引用对象用来通知 GC 回收之后的后续工作
				用法: 
					Object obj1 = new Object();
					//当phantomReference被GC回收前referenceQueue是空的，GC回收之后会被存入一个空的引用对象
					ReferenceQueue<Object> referenceQueue = new ReferenceQueue<>();
					PhantomReference<Object> phantomReference = new PhantomReference<>(obj1, referenceQueue);
					//用来获取referenceQueue中的值
					referenceQueue.poll();
			WeakHashMap 
				该键值对的集合类型只要触发gc就会被清空
		常见的六种 OOM 错误
			1、java.lang.OutOfMemoryError: Java heap space
				产生原因：
					由于对象和数组都存放在 堆 内存之中，当对象过多或者数组的长度过长时都会导致 堆 内存被撑满,
					从而报OutOfMemoryError: Java heap space
			2、java.lang.StackOverflowError:栈溢出错误
				产生原因:
					jvm 中一个线程执行一个方法的时候会在栈空间中压入一个栈帧，当这个方法中又调用了其他方法的时候就会
					继续压入一个栈帧，但是栈空间中栈帧的深度是有限的，当深度超过 jvm 规定的深度的时候就会报 
					StackOverflowError
			3、java.lang.OutOfMemoryError: GC overhead limit exceeded
				产生原因：
					GC时间过长会抛出 java.lang.OutOfMemoryError: GC overhead limit exceeded ，过长的定义是超过98%的时间
					都用来做GC并且回收了不到2%的堆内存
			4、java.lang.OutOfMemoryError: Direct buffer memory
				产生原因：
					写 NIO(非阻塞式IO) 程序经常使用 ByteBuffer 来读取或写入数据，这是一种基于通道(Channel)与缓冲区(Buffer)
					的I/O方式它可以使用 Native 函数库直接分配堆外内存，然后通过一个存储在Java堆里面的 DirectByteBuffer 
					对象作为这块内存的引用进行操作
					ByteBuffer.allocteDirect(capability) 这一种方式分配 OS 本地内存，不属于 GC 管辖范围
					但如果不断分配本地内存，堆内存很少使用，那么JVM就不需要执行 GC ，DirectByteBuffer 对象们就不会被回收
					这时候堆内存充足，但本地内存已经用光了，再次尝试分配本地内存就会出现 java.lang.OutOfMemoryError: 
					Direct buffer memory
			5、java.lang.OutOfMemoryError: unable to create new native thread
				产生原因：
					1、应用创建了太多线程，一个应用进程创建多个线程超过了系统承载极限
					2、服务器不允许应用创建这么多的线程，linux 系统默认允许单个进程可以创建的线程数是1024个
				解决方法：
					1、更改应用逻辑代码，让应用不创建那么多的线程
					2、在 linux 下，通过修改 /etc/security/limits.d/ 路径下的 conf 文件，扩大 linux 默认允许的线程数
			6、java.lang.OutOfMemoryError: Metaspace
				产生原因：
					加载了过多的类、常量变量、静态变量
		七种垃圾回收器及他们组合方式
			七种垃圾回收器	
				1、Serial (串行垃圾回收器)
					针对内存区域：年轻代
					特性：
						使用单一线程进行垃圾回收的工作，并且会停止用户线程
					采用垃圾回收算法：复制
					GCDetais 对应的单词：DefNew
				2、ParNew (并行垃圾回收器)
					针对内存区域：年轻代
					特性：
						也会停止用户线程，但是是使用多个线程进行垃圾回收的工作
					采用垃圾回收算法：复制
					GCDetais 对应的单词：ParNew
				3、Parallel Scavenge (吞吐量垃圾收集器)
					针对内存区域：年轻代
					特性：
						与其他垃圾收集器的区别在于 Parallel Scavenge 垃圾收集器的目标是达到一个可控制的吞吐量：
							垃圾收集器期望的目标：
								1、停顿时间
									停顿时间短适合需要与用户交互的程序，良好的响应速度能提升用户体验
								2、吞吐量(Parallel Scavenge垃圾收集器所侧重的)
									吞吐量=运行用户代码时间 / (运行用户代码时间 + 垃圾收集时间)
									高吞吐量则可以高效率利用 CPU 时间，尽快完成运算的任务，合适在后台计算不需要太多交互
									的任务
								3、覆盖区
									在达到前面个目标的情况下，尽量减少堆的内存空间，以获得更好的空间局部性
					采用垃圾回收算法：复制
					GCDetais 对应的单词：PSYoungGen
					有关JVM参数：
						Parallel Scavenge收集器提供两个参数用于精确控制吞吐量：
							1、-XX:MaxGCPauseMillis
								控制最大垃圾收集停顿时间，大于0的毫秒数；
								MaxGCPauseMillis 设置得稍小，停顿时间可能会缩短，但因为可能导致垃圾收集发生得更频繁而导致
								吞吐量下降
							2、-XX:GCTimeRatio
								设置垃圾收集时间占总时间的比率，0 < n < 100 的整数；
								GCTimeRatio 相当于设置吞吐量大小，例子：
									XX:GCTimeRatio=19，设置了垃圾收集时间占总时间的5% ：1/(1+19) = 5%
				4、Serial Old (针对老年代的串行垃圾回收器)
					针对内存区域：老年代
					特性：与 Serial 是一样的
					采用垃圾回收算法：标记整理
					GCDetais 对应的单词：Tenured
				5、Parallel Old (针对老年代的吞吐量垃圾收集器)
					针对内存区域：老年代
					特性：与 Parallel Scavenge 是一样的
					采用垃圾回收算法：标记整理
					GCDetais 对应的单词：ParOldGen
				6、CMS (并发标记清理收集器)
					针对内存区域：老年代
					特性：
						可以跟用户线程一起并发进行垃圾收集的工作，能够获得较低卡顿的效果
						CMS 运行过程分为下面4步：
							1、初始标记(CMS initial mark)
								需要停止用户线程，标记 GC Roots 能够直接关联到的对象
							2、并发标记(CMS concurrent mark)
								不需要停止用户线程，进行 GC Roots 可达性分析的过程中同时标记出存活对象
							3、重新标记(CMS remark)
								需要停止用户线程,修正并发标记期间因用户程序继续运作而导致标记变动的那一部分对象的标记记录
							4、并发清除(CMS concurrent sweep)
								不需要停止用户线程，回收所有的垃圾对象
					采用垃圾回收算法：标记清除
					GCDetais 对应的单词：CMS
				7、G1
					针对内存区域：年轻代和老年代
					特性：
						优点：可以充分利用大内存和多CPU的硬件优势来保证在大吞吐量的前提下保持快速的垃圾回收
						相比其他垃圾回收器的突出差异：
							不使用传统的年轻代老年代的物理内存划分，而是将整个堆内存空间划分成多个(默认2048个)大小相等
							的内存空间(Region), 每个Region都可以在垃圾回收的过程中在 Eden、Survivor、ol 和 Humongous 这
							四种内存空间类型中切换，也就是说将原先的固定且连续的物理内存分区变更为了不要求物理内存连续
							的逻辑内存分区
							注：
								Humongous 是 G1 特有的内存空间类型，用来存放特大的对象
						G1 运行过程分为下面4步：
							前 3 步跟 CMS 的前 3 步基本一致，主要区别在第 4 步：
								筛选回收：
									G1跟踪各个Region获得其收集价值大小，在后台维护一个优先列表,
									每次根据允许的收集时间，优先回收价值最大的Region(名称Garbage-First的由来)
					采用垃圾回收算法：复制 + 标记整理
					GCDetais 对应的单词：G1
					有关JVM参数：
						-XX:MaxGCPauseMillis ：为G1设置暂停时间目标，默认值为200毫秒
						-XX:G1HeapRegionSize ：设置每个Region大小(1MB到32MB)目标是在最小Java堆时可以拥有约2048个Region
					跟 CMS 相比优势在哪：
						1、G1很少会产生内存碎片，由于采用了标记整理的垃圾回收算法
						2、可以精确控制垃圾回收所需时间，由于 G1 将堆内存分成很多个小空间，所以 G1 能够尽量在指定的时限
						   内回收较多垃圾的小空间内的垃圾
			四种垃圾回收器组合(实际使用中java垃圾回收器的组合)
				1、Serial(年轻代) + Serial Old(老年代)		//已经淘汰了
					JVM 参数 -XX:+UseSerialGC
				2、ParNew(年轻代) + CMS(老年代)				//适用于需要大量后台计算而对用户交互流畅度要求不高的应用
					JVM 参数 -XX:+UseParNewGC -XX:+UseConcMarkSweepGC
					注：
						当 CMS 报 Concurrent Mode Failure 错误时会启用备用的 Serial Old 进行垃圾回收
				3、Parallel Scavenge(年轻代) + Parallel Old(老年代)   
															//jdk1.8默认垃圾回收器组合，适用于对用户交互流畅度要求高的应用
					JVM 参数 -XX:+UseParallelGC
				4、G1(同时管理年轻代和老年代)		//适用于对后台计算和用户交互流畅度都有所要求的应用，前提是大内存多CPU
					JVM 参数 -XX:+UseG1GC

	4、java 堆栈内存使用情况
	
	5、数据结构
		二叉树
			将第一个存储的数据作为树的根节点，比该根节点数值大的存入右边子节点，反之存入左边节点
			好处：
				大大提高搜索数据的效率，因为可以根据数值的比较选择左边还是右边的，不需要遍历全部数据
			缺点：
				当存入的数据是递增或者是递减的时候就会形成一个只有单边节点并且树的高度很高的二叉树，
				这样的话查询的效率和直接遍历全部数据是一样
		红黑树(平衡二叉树)
			在二叉树的基础上规定了数据树的高度差不能超过1，这样就避免了形成单边节点的数据树了
			缺点：
				1、当存储的数据量很多时，数据树的高度还是会很高，查找的深度很深的话查询效率就低了
				2、每一个io操作读取的数据量太小了，没有利用好磁盘IO的预读能力(空间局部性原理)，从而频繁的IO操作
		B-tree(B树) 多路平衡查找树
			B树是一个绝对平衡(所有的叶节点都在同一个高度上)的树
			一个节点可以有多个关键字，然后节点下可以有 关键字 + 1 个子节点，这样做的好处是：
				每次跟硬盘的IO操作可以在获取到的一页(4KB大小)数据中获取到更多的关键字和指针信息，充分利用了磁盘的预读能力
				，因为节点中存储的关键字变多，树的高度变低也就降低了IO操作的频次。
		B+tree
			B+树也是一个绝对平衡的树，与B树主要的不同点:
				1、B+树的关键字数量和子节点数量是一致的
				2、B+树的数据都存在叶节点上，而B树的数据分布在每一个节点，由于B+树的节点不保存的数据，这个就意味着每次的
				   IO操作，B+树可以从磁盘中读取更多的节点信息
				3、B+树的叶节点数据是有序的，并且有指向下一个叶节点最小数值的指针，这个有利于进行范围查询。
				
	6、算法
		1)、雪花算法
			是什么
				生成多服务全局唯一自增ID的一种算法
			为什么要用这个算法
				生成多服务全局唯一ID的方式及缺点
					UUID
						过长且无序，作为数据库主键不利于查询效率
					Mysql 的 replace into 加 自增主键ID
						每次执行会先删除然后进行插入，效率偏低且在数据库集群的环境下存在重复的问题
					redis集群
						怎么做到的
							通过设置步长(每次增加的数值，设置成redis服务器的数量)和不同的初始值，来达到不同redis服务器生成
							的ID绝不相同的目的
						弊端
							虽然满足了各种条件，但是为了一个ID搭建一套redis集群成本过高
			原理
				由 64 位 long 类型存储
				1、第 1 位
					固定为 0 
				2、2 ~ 41 (包含2) 之间 41 位
					存储时间戳
				3、42 ~ 52 (包含42) 之间 10 位
					自定义工作机器id，由5位的datacenterId和5位的worker组成，两者的取值范围都是0 ~ 31
				4、53 ~ 64 (包含53) 之间 12 位
					自定义序列号，用来记录同毫秒内产生的不同id，取值范围0~4094
					
	7、java 锁
		synchronized 和 Lock 的区别
			1、构成上不同
			   synchronized 是关键字，是 jvm 层面的
				   底层是通过 monitor 对象的 monitorenter (进入方法) 方法 和 monitorexit (退出方法) 方法实现的
			   Lock 是具体的接口，是api 层面的
			2、使用方法不同
			   被 synchronized 修饰的代码快会自己释放锁，不会造成死锁的情况
			   Lock 需要手动获取锁和释放锁，如果没有正确的释放锁就会造成死锁的情况
			3、是否是非公平锁
			   synchronized 是非公平锁
			   Lock 可以通过初始化时传入不同的参数来设置成非公平锁和公平锁
			4、等待是否可以中断
			   synchronized 不可以中断
			   Lock 可以中断
				   1、设置超时方法 tryLock(long timeout, TimeUnit nuit)
			5、是否可以精确唤醒
			   synchronized 不可以精确唤醒，只可以要么随机唤醒一个线程，要么全部唤醒
			   Lock 可以通过 Condition 对象来进行精确唤醒
		公平锁：
			按照先进先出的规则依次获取锁
				ReentrantLock 可以通过构造函数初始化成公平锁
		非公平锁：
			会首先尝试获取锁，如果没有获取到就采用公平锁的方式依次获取锁
				ReentrantLock 默认就是非公平锁，synchronized 也是一个非公平锁
		可重入锁(递归锁)
			指同一线程外层函数获得锁之后，在进入内层方法会自动获取锁，并且是用的同一把锁。
			ReentrantLock 和 synchronized 都是可重入锁
		自旋锁
			不堵塞线程，通过循环的方式获取锁，优点是减少了线程上下文的切换，确定是比较消耗 cpu
			Unsafe 类的 getAndSetInt 方法就是使用的自旋锁的原理
		读写锁
			允许多个线程同时读取公共资源，但同一时间只允许一个线程进行写操作
			ReentrantReadWriteLock 该类可以获取两种锁
				1、new ReentrantReadWriteLock().writeLock() 写锁，具有独占和原子性的特性
				2、new ReentrantReadWriteLock().readLock()  读锁，可以多个线程一起访问
				
	8、java 关于初始化类和实例化类的执行过程
		1、类初始化过程
		   1)、一个类有创建实例需要先加载并初始化该类
		   2)、一个子类初始化需要先初始化父类
		   3)、一个类初始化就是执行<clinit>()方法
			   <clinit>() 方法由静态类变量显示赋值代码和静态代码块组成
					静态类变量显示赋值代码：
						例如 private static int j = test(); 中的 test() 方法就属于 <clinit>() 方法
					静态代码块: static{}
			   所属 <clinit>() 的方法按代码从上到下顺序执行
			   <clinit>() 方法只执行一次
		2、类实例初始化过程
		   1)、类实例初始化就是执行<init>()方法
			   <init>() 方法由非静态实例变量显示赋值代码和非静态代码块，对应构造器代码组成
					非静态实例变量显示赋值代码：
						例如 private int j = test1(); 中的 test1() 方法就属于 <init>() 方法
					静态代码块: {}
			   所属 <init>() 的方法按代码从上到下顺序执行，构造器代码最后执行
			   <init>() 方法每次实例化都执行一次
			   子类的<init>() 方法的首行就是super()(这个一定是会有的，不写也是会执行) ，即对应父类的<init>() 方法
		3、方法的重写
		   1)、通过子类调重写的方法一定会调子类已经重写过的方法
		   2)、static 修饰的类方法，final 修饰的方法和 private 修饰的私有方法都不可被重写
			
java 框架篇
	一、spring 原理
		1、三大核心
			控制反转(IOC) 依赖注入(DI) 面向切面编程(AOP)
		2、spring bean 的作用域(使用 @Scope("singleton") 注解配置)
			1). singleton：默认值，当 IOC 容器一创建就会创建 bean 的实例，而且是单例，每次得到的都是同一个实例
			2). prototype：原型的，IOC 容器创建时不会创建 bean 的实例，每次调用 getBean 方法时再实例化 	
			    bean，每次都是一个新的实例
			3). request：每次请求实例化一个 bean
			4). session：在一次会话中共享一个bean
		3、spring 事务的传播行为
			1、Propagation.REQUIRED: 
				默认值，当一个开启事务的方法调用另一个开启事务的方法时，被调用的方法使用的还是调用方的方法的事务
			2、Propagation.REQUIRES_NEW:
				当一个开启事务的方法调用另一个开启事务的方法时，被调用的方法会新开启一个事务，并将调用方的方法的事务挂起
			实际使用
				用在 @Transactional 注解中：@Transactional(propagation=Propagation.REQUIRES_NEW)
		4、spring 事务的隔离级别
			在多线程并发的环境下事务会出现的问题
				1).脏读
					在 A,B 事务同时在运行的情况，A 事务可能会读到 B 事务修改还未提交的数据
				2).不可重复读
					在 A,B 事务同时在运行的情况，A 事务在进行同一个数据多次读取的操作时，会因为 B 事务的修改提交而导致
					多次读取的数据不一致
				3).幻读
					在 A,B 事务同时在运行的情况，A 事务在进行同一个数据列表多次读取的操作时，会因为 B 事务的新增提交而
					导致多次读取的数据条数不一致
			为了解决以上的问题 spring 提供了以下几种事务隔离级别
				1).读未提交(READ_UNCOMMITTED)
					允许 A 事务读取 B 事务未提交的数据，上述 3 个问题都无法解决
				2).读已提交(READ_COMMITTED)
					只允许 A 事务读取 B 事务已提交的数据，可以解决上述的 脏读 问题
				3).可重复读(REPEATABLE_READ)
					确保 A 事务可以多次从一个字段中读取到相同的值，即在 A 事务执行期间禁止其他事务对这个字段进行更新，可以
					解决上述的 脏读、可重复读 的问题
				4).串行化(SERIALIZABLE)
					确保 A 事务可以多次从一个表中读取到相同的行，即在 A 事务执行期间禁止其他事务对这个表进行除读取外的一切
					操作，可以解决上述的 脏读、可重复读、幻读 的问题
				注：
					隔离级别越高，在多线程并发的情况下效率就越低下
			实际使用
				用在 @Transactional 注解中：@Transactional(isolation=Isolation.READ_COMMITTED)
				
	二、SpringMVC 的执行流程
		请求 ———> DispatcherServlet ———> 中央控制器通过 HandlerMapper 找到 ———> HandlerExecutionChain
				  (中央控制器)							(处理器映射器)			(里面包含 HandlerIntercepter 和 Handler)
																						  (处理器拦截器)	(处理器对象)
																						|
																						V
		Handler	<——— DispatcherServlet 通过 HandlerAdapter 调用 <——— DispatcherServlet 得到 HandlerExecutionChain
        (处理器，即 Controller)				(处理器适配器)
				|
				V
		Handler 返回 ModelAndView ———> DispatcherServlet 得到 ModelAndView ———> DispatcherServlet 调用 ViewResolver
																									   (视图解析器)
																								|
																								V
																		DispatcherServlet 将解析后的 view 响应给请求
	三、redis
	
	四、Nginx
	
数据库
	Mysql高可用集群
		主从复制
		
		
高并发(多线程)编程
	List类
		使用 List<Object> list = new CopyOnWriteArrayList<>(); 解决 ConcurrentModificationException 报错
		原理：
			1、读取不加锁
			2、写入时加锁，写入时先复制一份经过扩容(length + 1)的副本，然后对副本进行操作，操作完之后将副本赋给原件，由于
			   数组变量是用 volatile 修饰的，其他引用该数组的线程会立刻发现数据的改变并从物理内存中获取最新的值。
			   注：为什么加锁了还是要先复制再操作，为了避免并发读写所引发的不可以预期的问题
	Set类
		使用 Set<String> set = new CopyOnWriteArraySet<>(); 解决 ConcurrentModificationException 报错
		CopyOnWriteArraySet 的 底层就是 CopyOnWriteArrayList, 原理和 CopyOnWriteArrayList 是一样的
	Map类
		使用 Map<String, String> map = new ConcurrentHashMap<>(); 解决 ConcurrentModificationException 报错
		原理：
			jdk1.8 之后主要使用 cas方式和 synchronized 锁来实现多线程同步操作，在 put 方法中通过 key 的 hashCode 计算出
			数组位置后，判断是否为 null，如果为 null 的话用 cas 的方式进行节点的添加，如果不为 null 并且 节点的 hash值
			不等于 MOVED (-1)(等于 MOVED 的话表示数组正在扩容) 的话就用 synchronized 锁的方式进行节点的添加。
			
递归和迭代
	递归是只方法调用自身，迭代是指循环更新变量的值
	1、递归的优缺点
		优点：代码精简，可读性较好
		缺点：执行效率较慢，当方法调用深度较深时会引发 栈溢出 的异常
	2、迭代的优缺点
		优点：执行效率高
		缺点：代码可读性较差
			
待学
	NIO(非阻塞式)程序